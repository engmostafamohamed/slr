name: Laravel CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger pipeline on push to the `main` branch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up PHP with required extensions
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'  # Use PHP 8.2
          extensions: mbstring, bcmath, zip
          ini-values: post_max_size=256M, upload_max_filesize=256M

      # Install Composer
      - name: Install Composer
        run: |
          curl -sS https://getcomposer.org/installer | php
          sudo mv composer.phar /usr/local/bin/composer

      # Install PHP dependencies
      - name: Install dependencies
        run: composer install --no-progress --prefer-dist

      # Set up environment variables for AWS and database
      - name: Set up environment variables
        run: |
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env

      # (Optional) Run tests (uncomment if you have tests)
      # - name: Run Tests
      #   run: php artisan test

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure deployment only happens after build and tests pass
    steps:
      # Checkout the code again for the deploy job
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up AWS CLI
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up Elastic Beanstalk CLI
      - name: Set up Elastic Beanstalk CLI
        run: |
          pip install awsebcli

      # Initialize Elastic Beanstalk application and environment
      - name: Initialize Elastic Beanstalk
        run: |
          eb init -p php -r ${{ secrets.AWS_REGION }} --region ${{ secrets.AWS_REGION }}
          
          # Check if environment exists and create it if necessary
          if ! eb use ${{ secrets.AWS_ELASTICBEANSTALK_ENVIRONMENT_NAME }}; then
            echo "Environment not found. Creating it..."
            eb create ${{ secrets.AWS_ELASTICBEANSTALK_ENVIRONMENT_NAME }} --region ${{ secrets.AWS_REGION }}
          else
            echo "Environment found. Deploying..."
          fi

      # If the environment is in CREATE_FAILED, terminate it and recreate
      - name: Handle Failed Environment
        run: |
          if ! eb deploy; then
            echo "Deployment failed. Terminating environment..."
            eb terminate --force
            echo "Recreating the environment..."
            eb create ${{ secrets.AWS_ELASTICBEANSTALK_ENVIRONMENT_NAME }} --region ${{ secrets.AWS_REGION }}
          fi

  post-deploy:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      # Send a notification or trigger other actions post-deployment if needed
      - name: Send deployment notification
        run: echo "Deployment to AWS Elastic Beanstalk completed successfully."
